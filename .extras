## Update the PATH variable
export PATH=$PATH:$HOME/.bin

## Basic aliases
alias ll="ls -alF"

## Theme configuration
if [[ $SHELL == *"zsh"* ]]; then
  ZSH_THEME_CONFIG=("s/e\[1;32m/e\[1;36m/g" ~/.oh-my-zsh/themes/xiong-chiamiov-plus.zsh-theme;)
  test $(uname -s) = "Darwin" && sed -i "" $ZSH_THEME_CONFIG;
  test $(uname -s) = "Linux" && sed -i $ZSH_THEME_CONFIG;
fi

## Homebrew settings
if brew --version &>/dev/null; then
  test $(uname -s) = "Darwin" && export BREWDIR="/opt/homebrew/bin/brew"
  test $(uname -s) = "Linux" && export BREWDIR="/home/linuxbrew/.linuxbrew/bin/brew"
  test -x $BREWDIR && eval "$($BREWDIR shellenv)"

  export HOMEBREW_EDITOR=vim
fi

## Git alias
test "git config --get alias.task" || git config --global alias.task '!f() { if [ "$1" != "no-ref" ] && ! [ "$1" -eq "$1" ] 2>/dev/null || [ -z "$2" ]; then echo "Invalid parameters. Usage: git task <number|no-ref> <description>"; exit 1; fi; git fetch && git checkout -b "task/$1-$2" && git push -u origin "task/$1-$2"; }; f'
test "git config --get alias.acp" || git config --global alias.acp '!f() { if [ -z "$1" ]; then echo "Usage: git acp <commit-message>"; exit 1; fi; git add . && git commit -m "$1" && git push origin HEAD; }; f'

## Kubernetes cheats
if kubectl version &>/dev/null; then
  alias k="kubectl"
  alias kx="kubectx"
  alias kn="kubens"
  alias kunset="kubectl config unset current-context; kubectl config unset current-context &>/dev/null"

  test -f $HOME/.kube/config && test -f $HOME/.kube/azure/config && export KUBECONFIG=$HOME/.kube/config:$HOME/.kube/azure/config
  function kexec() { kubectl exec -it $1 -- sh -c "clear; (bash || ash || sh)"; }
fi

if kubectl krew &>/dev/null; then
  test -f $HOME/.krew/bin/kubectl-krew && export PATH="$PATH:${HOME}/.local/bin:${HOME}/.krew/bin"
  test -f $HOME/.krew/bin/kubectl-krew && export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
fi

## Python
if python3 --version &>/dev/null; then
  alias py=python3
  test ! -f /usr/bin/python && sudo ln -s /usr/bin/python3 /usr/bin/python

  test -f /usr/local/bin/virtualenvwrapper.sh \
  && export WORKON_HOME=~/.virtualenvs \
  && export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 \
  && export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv \
  && source /usr/local/bin/virtualenvwrapper.sh
fi

## Terraform alias
alias tfswitch="tfswitch -b $HOME/.bin/terraform"
alias tf="terraform"
alias tfp="terraform plan -out=plan.tfplan --parallelism 2000"
alias tfa="terraform apply 'plan.tfplan'"
alias tfi="terraform init && terraform get -update"
alias tfw="terraform workspace"
alias tfwl="terraform workspace list"
alias tfws="terraform workspace select"
alias tfs="terraform state"
alias tfv="terraform validate"
alias tfiu="terraform init -upgrade"
alias tfip="tfi && tfp"

## Pulumi alias
if pulumi --version &>/dev/null; then
  alias pp="pulumi"
  alias ppp="pulumi preview"
  alias ppu="pulumi up"
  alias ppd="pulumi down"
  alias pps="pulumi stack"
  alias ppa="pulumi about"
fi

## AWS alias
if [[ $SHELL == *"zsh"* ]] && aws --version &>/dev/null; then
  # Functions to redefine export and update the prompt
  function my_export() {
      builtin export "$@"
      if [[ "$1" == "AWS_PROFILE"* ]] || [[ "$1" == "AWS_REGION"* ]]; then
          update_aws_prompt
      fi
  }

  alias export='my_export'

  # Function to update the RPROMPT
  function update_aws_prompt() {
      zmodload zsh/parameter
      test "$ZSH_THEME" = "devcontainers" || RPROMPT='$(aws_prompt_info)'
      zle && zle reset-prompt
  }

  # Function precmd to update RPROMPT
  function precmd() {
      update_aws_prompt
  }

  # RPROMPT configuration
  test "$ZSH_THEME" = "devcontainers" || RPROMPT='$(aws_prompt_info)'
  export AWS_PROFILE_STATE_ENABLED=true
  
  # Function to delete ECR images
  function delete_ecr_images() {
    if [ -z "$1" ] || [ -z "$2" ]; then
      echo "Usage: delete_ecr_images \"<region>\" \"<repositories separated by space>\""
      return 1
    fi
    local region=$1
    local repositories=$2

    for repo in "${repositories[@]}"; do
      aws ecr list-images --region "$region" --repository-name "$repo" --query 'imageIds[*]' --output json | \
      jq -c '.[] | if .imageTag == null then [{imageDigest: .imageDigest}] else [{imageDigest: .imageDigest, imageTag: .imageTag}] end' | \
      while read -r image; do
        aws ecr batch-delete-image --region "$region" --repository-name "$repo" --image-ids "$image" > /dev/null 2>&1
      done
    done
  }
fi

## Shell configuration
if [[ $SHELL == *"bash"* ]]; then

  test -z brew --version && test $(uname -s) = "Darwin" \
  && brew_etc="$(brew --prefix)/etc" \
  && test -f "${brew_etc}/profile.d/bash_completion.sh" && source "${brew_etc}/profile.d/bash_completion.sh"

  source <(kubectl completion bash)
  complete -o default -F __start_kubectl k

elif [[ $SHELL == *"zsh"* ]]; then

  source <(kubectl completion zsh)
  autoload -Uz compinit && compinit

  test "$ZSH_THEME" = "devcontainers" || RPROMPT=$(aws_prompt_info)
fi

## OpenVPN
if openvpn3 --version &>/dev/null; then
  alias ovpn-c="openvpn3 session-start --config ~/.client.ovpn"
  alias ovpn-d="openvpn3 session-manage --config ~/.client.ovpn --disconnect"
fi

## OpenSSL
if openssl version &>/dev/null; then
  function extractca() { openssl pkcs12 -in $1 -cacerts -nokeys -chain -out "ca.crt"; }
  function extractkey() { openssl pkcs12 -in $1 -nocerts -out "new.key" && openssl rsa -in "new.key" -out "private.key"; }
  function extractpublic() { openssl pkcs12 -in $1 -clcerts -nokeys -out "public.crt"; }
  function opensslcert() { openssl s_client -showcerts -connect $1:443; }
fi

## Functions
function createsshkey() { ssh-keygen -t rsa -b 4096 -C $1; }
function curlcert() { curl $1 -vI --stderr -; }
